//custom class
window.UNITY_BODY_UI_REGISTRY = {};

class UnityBodyUI2 extends HTMLElement {
    #myGameInstance = null;

    constructor() {
        super();
        this.innerHTML = this.template;

        window.UNITY_BODY_UI_REGISTRY[this.id] = this;
    }

    get template() {
        //Structure taken from UnityWebGL autogenerated page
        return `
        <div id="unity-container2" class="unity-desktop">
            <canvas id="unity-canvas2" width=960 height=600></canvas>
            <div id="unity-loading-bar2">
                <div id="unity-logo2"></div>
                <div id="unity-progress-bar-empty2">
                <div id="unity-progress-bar-full2"></div>
                </div>
            </div>
            <div id="unity-warning2"> </div>
            <div id="unity-footer2">
                <div id="unity-webgl-logo2"></div>
                <div id="unity-fullscreen-button2"></div>
                <div id="unity-build-title2">hra-second-screen-test</div>
            </div>
        </div>
        `;
    }

    connectedCallback(){
        //Create a reference to the shadow dom root
        const root = this;
        var container = root.querySelector("#unity-container2");
        var canvas = root.querySelector("#unity-canvas2");
        var loadingBar = root.querySelector("#unity-loading-bar2");
        var progressBarFull = root.querySelector("#unity-progress-bar-full2");
        var fullscreenButton = root.querySelector("#unity-fullscreen-button2");
        var warningBanner = root.querySelector("#unity-warning2");

        // Shows a temporary message banner/ribbon for a few seconds, or
        // a permanent error message on top of the canvas if type=='error'.
        // If type=='warning', a yellow highlight color is used.
        function unityShowBanner(msg, type) {
            function updateBannerVisibility() {
            warningBanner.style.display = warningBanner.children.length ? 'block' : 'none';
            }
            var div = root.createElement('div');
            div.innerHTML = msg;
            warningBanner.appendChild(div);
            if (type == 'error') div.style = 'background: red; padding: 10px;';
            else {
            if (type == 'warning') div.style = 'background: yellow; padding: 10px;';
            setTimeout(function() {
                warningBanner.removeChild(div);
                updateBannerVisibility();
            }, 5000);
            }
            updateBannerVisibility();
        }
        
        //Modify the buildUrl for different path
        var buildUrl = "buildTesting/Build";
        var loaderUrl = buildUrl + "/buildTesting.loader.js";
        var config = {
            dataUrl: buildUrl + "/buildTesting.data",
            frameworkUrl: buildUrl + "/buildTesting.framework.js",
            codeUrl: buildUrl + "/buildTesting.wasm",
            streamingAssetsUrl: "StreamingAssets",
            companyName: "DefaultCompany",
            productName: "hra-second-screen-test",
            productVersion: "0.1",
            showBanner: unityShowBanner,
        };

        // By default Unity keeps WebGL canvas render target size matched with
        // the DOM size of the canvas element (scaled by window.devicePixelRatio)
        if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
            // Mobile device style: fill the whole browser client area with the game canvas:

            var meta = document.createElement('meta');
            meta.name = 'viewport';
            meta.content = 'width=device-width, height=device-height, initial-scale=1.0, user-scalable=no, shrink-to-fit=yes';
            document.getElementsByTagName('head')[0].appendChild(meta);
            container.className = "unity-mobile";

            // To lower canvas resolution on mobile devices to gain some
            // performance, uncomment the following line:
            // config.devicePixelRatio = 1;

            canvas.style.width = window.innerWidth + 'px';
            canvas.style.height = window.innerHeight + 'px';

            unityShowBanner('WebGL builds are not supported on mobile devices.');
        } else {
            // Desktop style: Render the game canvas in a window that can be maximized to fullscreen:

            canvas.style.width = "960px";
            canvas.style.height = "600px";
        }

        loadingBar.style.display = "block";

        var script = document.createElement("script");
        script.src = loaderUrl;
        script.onload = () => {
            createUnityInstance(canvas, config, (progress) => {
            progressBarFull.style.width = 100 * progress + "%";
            }).then((unityInstance) => {
            loadingBar.style.display = "none";
            
            //game loaded initialize data
            this.setUnityInstance(unityInstance);

            fullscreenButton.onclick = () => {
                unityInstance.SetFullscreen(1);
            };
            }).catch((message) => {
                alert(message);
            });
        };

        //attach to this script
        root.appendChild(script);
    }


    
    static get observedAttributes() {
        return ['bounds', 'target', 'rotationy', 'camera',
          'rotationx', 'zoom', 'interactive', 'scene'];
    }



    setUnityInstance(unityInstance){
        //set the game instance
        this.#myGameInstance = unityInstance;
    
        //this runs async so put the id call here
        this.#myGameInstance.SendMessage("JSBridge", "SetInstance", this.id);
    
        //loop through attributes
        setTimeout(() => {
          UnityBodyUI2.observedAttributes.forEach(element => {
    
            if(this.getAttribute(element)!==null){
              var newVal = Number(this.getAttribute(element));
              this.attributeChangedCallback(element, null, newVal);
              this.addEventListener(element+"Change", (event) => this.setAttribute(element, event.detail));
            }
          });
        }, 1);
    }


    
    attributeChangedCallback(name, oldValue, newValue) {
        console.log(name, newValue);
        //For bounds scene and other objects, catch them in 
        if(oldValue != newValue){
            const functionName = `Set${name[0].toUpperCase()}${name.slice(1)}`
            
            if(this.#myGameInstance){
                console.log(typeof(newValue))
                this.#myGameInstance.SendMessage("JSBridge", functionName, newValue);
                
            }
        }
        else{
            console.log("Same old variable");
        }
    }
}

//define the class and use it
window.customElements.define('wc-second-cam-body', UnityBodyUI2)